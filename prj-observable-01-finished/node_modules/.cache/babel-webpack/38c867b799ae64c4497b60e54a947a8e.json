{"ast":null,"code":"import _assertThisInitialized from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*#__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    _classCallCheck(this, WindowToggleOperator);\n\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(WindowToggleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n  }]);\n\n  return WindowToggleOperator;\n}();\n\nvar WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowToggleSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(WindowToggleSubscriber);\n\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, WindowToggleSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_assertThisInitialized(_this), openings, openings));\n\n    return _this;\n  }\n\n  _createClass(WindowToggleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n\n      if (contexts) {\n        var len = contexts.length;\n\n        for (var i = 0; i < len; i++) {\n          contexts[i].window.next(value);\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.error(err);\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.complete();\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.unsubscribe();\n          context.subscription.unsubscribe();\n        }\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      if (outerValue === this.openings) {\n        var closingNotifier;\n\n        try {\n          var closingSelector = this.closingSelector;\n          closingNotifier = closingSelector(innerValue);\n        } catch (e) {\n          return this.error(e);\n        }\n\n        var window = new Subject();\n        var subscription = new Subscription();\n        var context = {\n          window: window,\n          subscription: subscription\n        };\n        this.contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          innerSubscription.context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n      } else {\n        this.closeWindow(this.contexts.indexOf(outerValue));\n      }\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(inner) {\n      if (inner !== this.openSubscription) {\n        this.closeWindow(this.contexts.indexOf(inner.context));\n      }\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(index) {\n      if (index === -1) {\n        return;\n      }\n\n      var contexts = this.contexts;\n      var context = contexts[index];\n      var window = context.window,\n          subscription = context.subscription;\n      contexts.splice(index, 1);\n      window.complete();\n      subscription.unsubscribe();\n    }\n  }]);\n\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/windowToggle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n//# sourceMappingURL=windowToggle.js.map"]},"metadata":{},"sourceType":"module"}