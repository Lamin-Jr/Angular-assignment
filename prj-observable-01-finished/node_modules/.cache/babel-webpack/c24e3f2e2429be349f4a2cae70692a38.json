{"ast":null,"code":"import _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from './Action';\nexport var AsyncAction = /*#__PURE__*/function (_Action) {\n  _inherits(AsyncAction, _Action);\n\n  var _super = _createSuper(AsyncAction);\n\n  function AsyncAction(scheduler, work) {\n    var _this;\n\n    _classCallCheck(this, AsyncAction);\n\n    _this = _super.call(this, scheduler, work);\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n\n  _createClass(AsyncAction, [{\n    key: \"schedule\",\n    value: function schedule(state) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this.closed) {\n        return this;\n      }\n\n      this.state = state;\n      var id = this.id;\n      var scheduler = this.scheduler;\n\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, delay);\n      }\n\n      this.pending = true;\n      this.delay = delay;\n      this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n      return this;\n    }\n  }, {\n    key: \"requestAsyncId\",\n    value: function requestAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n  }, {\n    key: \"recycleAsyncId\",\n    value: function recycleAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (delay !== null && this.delay === delay && this.pending === false) {\n        return id;\n      }\n\n      clearInterval(id);\n      return undefined;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(state, delay) {\n      if (this.closed) {\n        return new Error('executing a cancelled action');\n      }\n\n      this.pending = false;\n\n      var error = this._execute(state, delay);\n\n      if (error) {\n        return error;\n      } else if (this.pending === false && this.id != null) {\n        this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n      }\n    }\n  }, {\n    key: \"_execute\",\n    value: function _execute(state, delay) {\n      var errored = false;\n      var errorValue = undefined;\n\n      try {\n        this.work(state);\n      } catch (e) {\n        errored = true;\n        errorValue = !!e && e || new Error(e);\n      }\n\n      if (errored) {\n        this.unsubscribe();\n        return errorValue;\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var id = this.id;\n      var scheduler = this.scheduler;\n      var actions = scheduler.actions;\n      var index = actions.indexOf(this);\n      this.work = null;\n      this.state = null;\n      this.pending = false;\n      this.scheduler = null;\n\n      if (index !== -1) {\n        actions.splice(index, 1);\n      }\n\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null;\n    }\n  }]);\n\n  return AsyncAction;\n}(Action);","map":{"version":3,"sources":["../../../src/internal/scheduler/AsyncAction.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action } from './Action';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        clearInterval(id);\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, delay) {\n        let errored = false;\n        let errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    _unsubscribe() {\n        const id = this.id;\n        const scheduler = this.scheduler;\n        const actions = scheduler.actions;\n        const index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    }\n}\n//# sourceMappingURL=AsyncAction.js.map"]},"metadata":{},"sourceType":"module"}