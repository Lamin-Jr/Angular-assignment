{"ast":null,"code":"import _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\n\nvar DelayWhenOperator = /*#__PURE__*/function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    _classCallCheck(this, DelayWhenOperator);\n\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  _createClass(DelayWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n  }]);\n\n  return DelayWhenOperator;\n}();\n\nvar DelayWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(DelayWhenSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(DelayWhenSubscriber);\n\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    var _this;\n\n    _classCallCheck(this, DelayWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.delayDurationSelector = delayDurationSelector;\n    _this.completed = false;\n    _this.delayNotifierSubscriptions = [];\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(DelayWhenSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n      this.destination.next(outerValue);\n      this.removeSubscription(innerSub);\n      this.tryComplete();\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(error, innerSub) {\n      this._error(error);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var value = this.removeSubscription(innerSub);\n\n      if (value) {\n        this.destination.next(value);\n      }\n\n      this.tryComplete();\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      var index = this.index++;\n\n      try {\n        var delayNotifier = this.delayDurationSelector(value, index);\n\n        if (delayNotifier) {\n          this.tryDelay(delayNotifier, value);\n        }\n      } catch (err) {\n        this.destination.error(err);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.completed = true;\n      this.tryComplete();\n      this.unsubscribe();\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      subscription.unsubscribe();\n      var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\n      if (subscriptionIdx !== -1) {\n        this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      }\n\n      return subscription.outerValue;\n    }\n  }, {\n    key: \"tryDelay\",\n    value: function tryDelay(delayNotifier, value) {\n      var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n      if (notifierSubscription && !notifierSubscription.closed) {\n        var destination = this.destination;\n        destination.add(notifierSubscription);\n        this.delayNotifierSubscriptions.push(notifierSubscription);\n      }\n    }\n  }, {\n    key: \"tryComplete\",\n    value: function tryComplete() {\n      if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return DelayWhenSubscriber;\n}(OuterSubscriber);\n\nvar SubscriptionDelayObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(SubscriptionDelayObservable, _Observable);\n\n  var _super2 = _createSuper(SubscriptionDelayObservable);\n\n  function SubscriptionDelayObservable(source, subscriptionDelay) {\n    var _this2;\n\n    _classCallCheck(this, SubscriptionDelayObservable);\n\n    _this2 = _super2.call(this);\n    _this2.source = source;\n    _this2.subscriptionDelay = subscriptionDelay;\n    return _this2;\n  }\n\n  _createClass(SubscriptionDelayObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n  }]);\n\n  return SubscriptionDelayObservable;\n}(Observable);\n\nvar SubscriptionDelaySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(SubscriptionDelaySubscriber, _Subscriber);\n\n  var _super3 = _createSuper(SubscriptionDelaySubscriber);\n\n  function SubscriptionDelaySubscriber(parent, source) {\n    var _this3;\n\n    _classCallCheck(this, SubscriptionDelaySubscriber);\n\n    _this3 = _super3.call(this);\n    _this3.parent = parent;\n    _this3.source = source;\n    _this3.sourceSubscribed = false;\n    return _this3;\n  }\n\n  _createClass(SubscriptionDelaySubscriber, [{\n    key: \"_next\",\n    value: function _next(unused) {\n      this.subscribeToSource();\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.unsubscribe();\n      this.parent.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.unsubscribe();\n      this.subscribeToSource();\n    }\n  }, {\n    key: \"subscribeToSource\",\n    value: function subscribeToSource() {\n      if (!this.sourceSubscribed) {\n        this.sourceSubscribed = true;\n        this.unsubscribe();\n        this.source.subscribe(this.parent);\n      }\n    }\n  }]);\n\n  return SubscriptionDelaySubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/delayWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n    constructor(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n    constructor(destination, delayDurationSelector) {\n        super(destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.index = 0;\n    }\n    notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        const value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    }\n    _next(value) {\n        const index = this.index++;\n        try {\n            const delayNotifier = this.delayDurationSelector(value, index);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.completed = true;\n        this.tryComplete();\n        this.unsubscribe();\n    }\n    removeSubscription(subscription) {\n        subscription.unsubscribe();\n        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        if (subscriptionIdx !== -1) {\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n        }\n        return subscription.outerValue;\n    }\n    tryDelay(delayNotifier, value) {\n        const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            const destination = this.destination;\n            destination.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n    }\n    tryComplete() {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    }\n}\nclass SubscriptionDelayObservable extends Observable {\n    constructor(source, subscriptionDelay) {\n        super();\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    _subscribe(subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n    constructor(parent, source) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    _next(unused) {\n        this.subscribeToSource();\n    }\n    _error(err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    }\n    _complete() {\n        this.unsubscribe();\n        this.subscribeToSource();\n    }\n    subscribeToSource() {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    }\n}\n//# sourceMappingURL=delayWhen.js.map"]},"metadata":{},"sourceType":"module"}