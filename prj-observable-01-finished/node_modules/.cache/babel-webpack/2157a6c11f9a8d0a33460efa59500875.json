{"ast":null,"code":"import _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nexport var ReplaySubject = /*#__PURE__*/function (_Subject) {\n  _inherits(ReplaySubject, _Subject);\n\n  var _super = _createSuper(ReplaySubject);\n\n  function ReplaySubject() {\n    var _this;\n\n    var bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;\n    var windowTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n    var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, ReplaySubject);\n\n    _this = _super.call(this);\n    _this.scheduler = scheduler;\n    _this._events = [];\n    _this._infiniteTimeWindow = false;\n    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    _this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      _this._infiniteTimeWindow = true;\n      _this.next = _this.nextInfiniteTimeWindow;\n    } else {\n      _this.next = _this.nextTimeWindow;\n    }\n\n    return _this;\n  }\n\n  _createClass(ReplaySubject, [{\n    key: \"nextInfiniteTimeWindow\",\n    value: function nextInfiniteTimeWindow(value) {\n      if (!this.isStopped) {\n        var _events = this._events;\n\n        _events.push(value);\n\n        if (_events.length > this._bufferSize) {\n          _events.shift();\n        }\n      }\n\n      _get(_getPrototypeOf(ReplaySubject.prototype), \"next\", this).call(this, value);\n    }\n  }, {\n    key: \"nextTimeWindow\",\n    value: function nextTimeWindow(value) {\n      if (!this.isStopped) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n\n        this._trimBufferThenGetEvents();\n      }\n\n      _get(_getPrototypeOf(ReplaySubject.prototype), \"next\", this).call(this, value);\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var _infiniteTimeWindow = this._infiniteTimeWindow;\n\n      var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n\n      var scheduler = this.scheduler;\n      var len = _events.length;\n      var subscription;\n\n      if (this.closed) {\n        throw new ObjectUnsubscribedError();\n      } else if (this.isStopped || this.hasError) {\n        subscription = Subscription.EMPTY;\n      } else {\n        this.observers.push(subscriber);\n        subscription = new SubjectSubscription(this, subscriber);\n      }\n\n      if (scheduler) {\n        subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n      }\n\n      if (_infiniteTimeWindow) {\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n          subscriber.next(_events[i]);\n        }\n      } else {\n        for (var _i = 0; _i < len && !subscriber.closed; _i++) {\n          subscriber.next(_events[_i].value);\n        }\n      }\n\n      if (this.hasError) {\n        subscriber.error(this.thrownError);\n      } else if (this.isStopped) {\n        subscriber.complete();\n      }\n\n      return subscription;\n    }\n  }, {\n    key: \"_getNow\",\n    value: function _getNow() {\n      return (this.scheduler || queue).now();\n    }\n  }, {\n    key: \"_trimBufferThenGetEvents\",\n    value: function _trimBufferThenGetEvents() {\n      var now = this._getNow();\n\n      var _bufferSize = this._bufferSize;\n      var _windowTime = this._windowTime;\n      var _events = this._events;\n      var eventsCount = _events.length;\n      var spliceCount = 0;\n\n      while (spliceCount < eventsCount) {\n        if (now - _events[spliceCount].time < _windowTime) {\n          break;\n        }\n\n        spliceCount++;\n      }\n\n      if (eventsCount > _bufferSize) {\n        spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n      }\n\n      if (spliceCount > 0) {\n        _events.splice(0, spliceCount);\n      }\n\n      return _events;\n    }\n  }]);\n\n  return ReplaySubject;\n}(Subject);\n\nvar ReplayEvent = /*#__PURE__*/_createClass(function ReplayEvent(time, value) {\n  _classCallCheck(this, ReplayEvent);\n\n  this.time = time;\n  this.value = value;\n});","map":{"version":3,"sources":["../../src/internal/ReplaySubject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nexport class ReplaySubject extends Subject {\n    constructor(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {\n        super();\n        this.scheduler = scheduler;\n        this._events = [];\n        this._infiniteTimeWindow = false;\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            this._infiniteTimeWindow = true;\n            this.next = this.nextInfiniteTimeWindow;\n        }\n        else {\n            this.next = this.nextTimeWindow;\n        }\n    }\n    nextInfiniteTimeWindow(value) {\n        if (!this.isStopped) {\n            const _events = this._events;\n            _events.push(value);\n            if (_events.length > this._bufferSize) {\n                _events.shift();\n            }\n        }\n        super.next(value);\n    }\n    nextTimeWindow(value) {\n        if (!this.isStopped) {\n            this._events.push(new ReplayEvent(this._getNow(), value));\n            this._trimBufferThenGetEvents();\n        }\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        const _infiniteTimeWindow = this._infiniteTimeWindow;\n        const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        const scheduler = this.scheduler;\n        const len = _events.length;\n        let subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    }\n    _getNow() {\n        return (this.scheduler || queue).now();\n    }\n    _trimBufferThenGetEvents() {\n        const now = this._getNow();\n        const _bufferSize = this._bufferSize;\n        const _windowTime = this._windowTime;\n        const _events = this._events;\n        const eventsCount = _events.length;\n        let spliceCount = 0;\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    }\n}\nclass ReplayEvent {\n    constructor(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n}\n//# sourceMappingURL=ReplaySubject.js.map"]},"metadata":{},"sourceType":"module"}