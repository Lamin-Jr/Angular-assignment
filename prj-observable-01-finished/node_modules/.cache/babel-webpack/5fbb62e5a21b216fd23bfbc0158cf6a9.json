{"ast":null,"code":"import _toConsumableArray from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  if (sources.length === 1) {\n    var first = sources[0];\n\n    if (isArray(first)) {\n      return forkJoinInternal(first, null);\n    }\n\n    if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n      var keys = Object.keys(first);\n      return forkJoinInternal(keys.map(function (key) {\n        return first[key];\n      }), keys);\n    }\n  }\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector.apply(void 0, _toConsumableArray(args));\n    }));\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n\n    var _loop = function _loop(i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function next(value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n\n          values[i] = value;\n        },\n        error: function error(err) {\n          return subscriber.error(err);\n        },\n        complete: function complete() {\n          completed++;\n\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop(i);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin(...sources) {\n    if (sources.length === 1) {\n        const first = sources[0];\n        if (isArray(first)) {\n            return forkJoinInternal(first, null);\n        }\n        if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n            const keys = Object.keys(first);\n            return forkJoinInternal(keys.map(key => first[key]), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        const resultSelector = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map((args) => resultSelector(...args)));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(subscriber => {\n        const len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(len);\n        let completed = 0;\n        let emitted = 0;\n        for (let i = 0; i < len; i++) {\n            const source = from(sources[i]);\n            let hasValue = false;\n            subscriber.add(source.subscribe({\n                next: value => {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: err => subscriber.error(err),\n                complete: () => {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map"]},"metadata":{},"sourceType":"module"}