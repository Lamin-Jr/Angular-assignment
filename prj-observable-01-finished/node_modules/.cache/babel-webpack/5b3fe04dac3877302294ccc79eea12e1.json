{"ast":null,"code":"import _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ConnectableObservable, _Observable);\n\n  var _super = _createSuper(ConnectableObservable);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n\n    _classCallCheck(this, ConnectableObservable);\n\n    _this = _super.call(this);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n\n      return this._subject;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var connection = this._connection;\n\n      if (!connection) {\n        this._isComplete = false;\n        connection = this._connection = new Subscription();\n        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n\n  return ConnectableObservable;\n}(Observable);\nexport var connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {\n  _inherits(ConnectableSubscriber, _SubjectSubscriber);\n\n  var _super2 = _createSuper(ConnectableSubscriber);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this2;\n\n    _classCallCheck(this, ConnectableSubscriber);\n\n    _this2 = _super2.call(this, destination);\n    _this2.connectable = connectable;\n    return _this2;\n  }\n\n  _createClass(ConnectableSubscriber, [{\n    key: \"_error\",\n    value: function _error(err) {\n      this._unsubscribe();\n\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.connectable._isComplete = true;\n\n      this._unsubscribe();\n\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (connectable) {\n        this.connectable = null;\n        var connection = connectable._connection;\n        connectable._refCount = 0;\n        connectable._subject = null;\n        connectable._connection = null;\n\n        if (connection) {\n          connection.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*#__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    _classCallCheck(this, RefCountOperator);\n\n    this.connectable = connectable;\n  }\n\n  _createClass(RefCountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var connectable = this.connectable;\n      connectable._refCount++;\n      var refCounter = new RefCountSubscriber(subscriber, connectable);\n      var subscription = source.subscribe(refCounter);\n\n      if (!refCounter.closed) {\n        refCounter.connection = connectable.connect();\n      }\n\n      return subscription;\n    }\n  }]);\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(RefCountSubscriber, _Subscriber);\n\n  var _super3 = _createSuper(RefCountSubscriber);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this3;\n\n    _classCallCheck(this, RefCountSubscriber);\n\n    _this3 = _super3.call(this, destination);\n    _this3.connectable = connectable;\n    return _this3;\n  }\n\n  _createClass(RefCountSubscriber, [{\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (!connectable) {\n        this.connection = null;\n        return;\n      }\n\n      this.connectable = null;\n      var refCount = connectable._refCount;\n\n      if (refCount <= 0) {\n        this.connection = null;\n        return;\n      }\n\n      connectable._refCount = refCount - 1;\n\n      if (refCount > 1) {\n        this.connection = null;\n        return;\n      }\n\n      var connection = this.connection;\n      var sharedConnection = connectable._connection;\n      this.connection = null;\n\n      if (sharedConnection && (!connection || sharedConnection === connection)) {\n        sharedConnection.unsubscribe();\n      }\n    }\n  }]);\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"module"}