{"ast":null,"code":"import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function subscribeTo(result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\".concat(result, \"'\");\n    var msg = \"You provided \".concat(value, \" where a stream was expected.\") + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeTo.ts"],"names":[],"mappings":"AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,UAAU,IAAI,iBAAvB,QAAgD,sBAAhD;AAIA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAI,MAAJ,EAAsF;EAC/G,IAAI,CAAC,CAAC,MAAF,IAAY,OAAO,MAAM,CAAC,iBAAD,CAAb,KAAqC,UAArD,EAAiE;IAC/D,OAAO,qBAAqB,CAAC,MAAD,CAA5B;EACD,CAFD,MAEO,IAAI,WAAW,CAAC,MAAD,CAAf,EAAyB;IAC9B,OAAO,gBAAgB,CAAC,MAAD,CAAvB;EACD,CAFM,MAEA,IAAI,SAAS,CAAC,MAAD,CAAb,EAAuB;IAC5B,OAAO,kBAAkB,CAAC,MAAD,CAAzB;EACD,CAFM,MAEA,IAAI,CAAC,CAAC,MAAF,IAAY,OAAO,MAAM,CAAC,eAAD,CAAb,KAAmC,UAAnD,EAA+D;IACpE,OAAO,mBAAmB,CAAC,MAAD,CAA1B;EACD,CAFM,MAEA;IACL,IAAM,KAAK,GAAG,QAAQ,CAAC,MAAD,CAAR,GAAmB,mBAAnB,cAA6C,MAA7C,MAAd;IACA,IAAM,GAAG,GAAG,uBAAgB,KAAhB,qCACR,8DADJ;IAEA,MAAM,IAAI,SAAJ,CAAc,GAAd,CAAN;EACD;AACF,CAfM","sourcesContent":["import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map"]},"metadata":{},"sourceType":"module"}