{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n\n        var value;\n        var done;\n\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"sources":["../../../src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AAEA,OAAM,SAAU,gBAAV,CAA8B,KAA9B,EAAkD,SAAlD,EAA0E;EAC9E,IAAI,CAAC,KAAL,EAAY;IACV,MAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;EACD;;EACD,OAAO,IAAI,UAAJ,CAAkB,UAAA,UAAU,EAAG;IACpC,IAAM,GAAG,GAAG,IAAI,YAAJ,EAAZ;IACA,IAAI,QAAJ;IACA,GAAG,CAAC,GAAJ,CAAQ,YAAK;MAEX,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,MAAhB,KAA2B,UAA3C,EAAuD;QACrD,QAAQ,CAAC,MAAT;MACD;IACF,CALD;IAMA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,YAAK;MAC9B,QAAQ,GAAG,KAAK,CAAC,eAAD,CAAL,EAAX;MACA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,YAAA;QACzB,IAAI,UAAU,CAAC,MAAf,EAAuB;UACrB;QACD;;QACD,IAAI,KAAJ;QACA,IAAI,IAAJ;;QACA,IAAI;UACF,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAT,EAAf;UACA,KAAK,GAAG,MAAM,CAAC,KAAf;UACA,IAAI,GAAG,MAAM,CAAC,IAAd;QACD,CAJD,CAIE,OAAO,GAAP,EAAY;UACZ,UAAU,CAAC,KAAX,CAAiB,GAAjB;UACA;QACD;;QACD,IAAI,IAAJ,EAAU;UACR,UAAU,CAAC,QAAX;QACD,CAFD,MAEO;UACL,UAAU,CAAC,IAAX,CAAgB,KAAhB;UACA,KAAK,QAAL;QACD;MACF,CApBO,CAAR;IAqBD,CAvBO,CAAR;IAwBA,OAAO,GAAP;EACD,CAlCM,CAAP;AAmCD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let iterator;\n        sub.add(() => {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(() => {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                let value;\n                let done;\n                try {\n                    const result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map"]},"metadata":{},"sourceType":"module"}