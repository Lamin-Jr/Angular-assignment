{"ast":null,"code":"import _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*#__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    _classCallCheck(this, RetryWhenOperator);\n\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  _createClass(RetryWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n  }]);\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(RetryWhenSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(RetryWhenSubscriber);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this;\n\n    _classCallCheck(this, RetryWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  _createClass(RetryWhenSubscriber, [{\n    key: \"error\",\n    value: function error(err) {\n      if (!this.isStopped) {\n        var errors = this.errors;\n        var retries = this.retries;\n        var retriesSubscription = this.retriesSubscription;\n\n        if (!retries) {\n          errors = new Subject();\n\n          try {\n            var notifier = this.notifier;\n            retries = notifier(errors);\n          } catch (e) {\n            return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), \"error\", this).call(this, e);\n          }\n\n          retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n        } else {\n          this.errors = undefined;\n          this.retriesSubscription = undefined;\n        }\n\n        this._unsubscribeAndRecycle();\n\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        errors.next(err);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var errors = this.errors,\n          retriesSubscription = this.retriesSubscription;\n\n      if (errors) {\n        errors.unsubscribe();\n        this.errors = undefined;\n      }\n\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = undefined;\n      }\n\n      this.retries = undefined;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n\n      this._unsubscribeAndRecycle();\n\n      this._unsubscribe = _unsubscribe;\n      this.source.subscribe(this);\n    }\n  }]);\n\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retryWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,OAAT,QAAwB,YAAxB;AAIA,SAAS,qBAAT,EAAgC,cAAhC,EAAgD,qBAAhD,QAA6E,mBAA7E;AAgBA,OAAM,SAAU,SAAV,CAAuB,QAAvB,EAA6E;EACjF,OAAO,UAAC,MAAD;IAAA,OAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,QAAtB,EAAgC,MAAhC,CAAZ,CAA3B;EAAA,CAAP;AACD;;IAEK,iB;EACJ,2BAAsB,QAAtB,EACsB,MADtB,EAC2C;IAAA;;IADrB,KAAA,QAAA,GAAA,QAAA;IACA,KAAA,MAAA,GAAA,MAAA;EACrB;;;;WAED,cAAK,UAAL,EAAgC,MAAhC,EAA2C;MACzC,OAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,KAAK,QAAzC,EAAmD,KAAK,MAAxD,CAAjB,CAAP;IACD;;;;;;IAQG,mB;;;;;EAMJ,6BAAY,WAAZ,EACoB,QADpB,EAEoB,MAFpB,EAEyC;IAAA;;IAAA;;IACvC,0BAAM,WAAN;IAFkB,MAAA,QAAA,GAAA,QAAA;IACA,MAAA,MAAA,GAAA,MAAA;IAAqB;EAExC;;;;WAED,eAAM,GAAN,EAAc;MACZ,IAAI,CAAC,KAAK,SAAV,EAAqB;QAEnB,IAAI,MAAM,GAAG,KAAK,MAAlB;QACA,IAAI,OAAO,GAAQ,KAAK,OAAxB;QACA,IAAI,mBAAmB,GAAG,KAAK,mBAA/B;;QAEA,IAAI,CAAC,OAAL,EAAc;UACZ,MAAM,GAAG,IAAI,OAAJ,EAAT;;UACA,IAAI;YACF,IAAQ,QAAR,GAAqB,IAArB,CAAQ,QAAR;YACA,OAAO,GAAG,QAAQ,CAAC,MAAD,CAAlB;UACD,CAHD,CAGE,OAAO,CAAP,EAAU;YACV,sFAAmB,CAAnB;UACD;;UACD,mBAAmB,GAAG,cAAc,CAAC,OAAD,EAAU,IAAI,qBAAJ,CAA0B,IAA1B,CAAV,CAApC;QACD,CATD,MASO;UACL,KAAK,MAAL,GAAc,SAAd;UACA,KAAK,mBAAL,GAA2B,SAA3B;QACD;;QAED,KAAK,sBAAL;;QAEA,KAAK,MAAL,GAAc,MAAd;QACA,KAAK,OAAL,GAAe,OAAf;QACA,KAAK,mBAAL,GAA2B,mBAA3B;QAEA,MAAO,CAAC,IAAR,CAAa,GAAb;MACD;IACF;;;WAGD,wBAAY;MACV,IAAQ,MAAR,GAAwC,IAAxC,CAAQ,MAAR;MAAA,IAAgB,mBAAhB,GAAwC,IAAxC,CAAgB,mBAAhB;;MACA,IAAI,MAAJ,EAAY;QACV,MAAM,CAAC,WAAP;QACA,KAAK,MAAL,GAAc,SAAd;MACD;;MACD,IAAI,mBAAJ,EAAyB;QACvB,mBAAmB,CAAC,WAApB;QACA,KAAK,mBAAL,GAA2B,SAA3B;MACD;;MACD,KAAK,OAAL,GAAe,SAAf;IACD;;;WAED,sBAAU;MACR,IAAQ,YAAR,GAAyB,IAAzB,CAAQ,YAAR;MAEA,KAAK,YAAL,GAAoB,IAApB;;MACA,KAAK,sBAAL;;MACA,KAAK,YAAL,GAAoB,YAApB;MAEA,KAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;IACD;;;;EAjEqC,qB","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map"]},"metadata":{},"sourceType":"module"}