{"ast":null,"code":"import { Observable } from '../Observable';\nexport function range() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var count = arguments.length > 1 ? arguments[1] : undefined;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  return new Observable(function (subscriber) {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n\n    var index = 0;\n    var current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n\n        subscriber.next(current++);\n\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n      index = state.index,\n      count = state.count,\n      subscriber = state.subscriber;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,eAA3B;AAoCA,OAAM,SAAU,KAAV,GAEyC;EAAA,IAFzB,KAEyB,uEAFT,CAES;EAAA,IADzB,KACyB;EAAA,IAAzB,SAAyB;EAC7C,OAAO,IAAI,UAAJ,CAAuB,UAAA,UAAU,EAAG;IACzC,IAAI,KAAK,KAAK,SAAd,EAAyB;MACvB,KAAK,GAAG,KAAR;MACA,KAAK,GAAG,CAAR;IACD;;IAED,IAAI,KAAK,GAAG,CAAZ;IACA,IAAI,OAAO,GAAG,KAAd;;IAEA,IAAI,SAAJ,EAAe;MACb,OAAO,SAAS,CAAC,QAAV,CAAmB,QAAnB,EAA6B,CAA7B,EAAgC;QACrC,KAAK,EAAL,KADqC;QAC9B,KAAK,EAAL,KAD8B;QACvB,KAAK,EAAL,KADuB;QAChB,UAAU,EAAV;MADgB,CAAhC,CAAP;IAGD,CAJD,MAIO;MACL,GAAG;QACD,IAAI,KAAK,MAAM,KAAf,EAAsB;UACpB,UAAU,CAAC,QAAX;UACA;QACD;;QACD,UAAU,CAAC,IAAX,CAAgB,OAAO,EAAvB;;QACA,IAAI,UAAU,CAAC,MAAf,EAAuB;UACrB;QACD;MACF,CATD,QASS,IATT;IAUD;;IAED,OAAO,SAAP;EACD,CA3BM,CAAP;AA4BD;AAGD,OAAM,SAAU,QAAV,CAA+C,KAA/C,EAAyD;EAC7D,IAAQ,KAAR,GAA4C,KAA5C,CAAQ,KAAR;EAAA,IAAe,KAAf,GAA4C,KAA5C,CAAe,KAAf;EAAA,IAAsB,KAAtB,GAA4C,KAA5C,CAAsB,KAAtB;EAAA,IAA6B,UAA7B,GAA4C,KAA5C,CAA6B,UAA7B;;EAEA,IAAI,KAAK,IAAI,KAAb,EAAoB;IAClB,UAAU,CAAC,QAAX;IACA;EACD;;EAED,UAAU,CAAC,IAAX,CAAgB,KAAhB;;EAEA,IAAI,UAAU,CAAC,MAAf,EAAuB;IACrB;EACD;;EAED,KAAK,CAAC,KAAN,GAAc,KAAK,GAAG,CAAtB;EACA,KAAK,CAAC,KAAN,GAAc,KAAK,GAAG,CAAtB;EAEA,KAAK,QAAL,CAAc,KAAd;AACD","sourcesContent":["import { Observable } from '../Observable';\nexport function range(start = 0, count, scheduler) {\n    return new Observable(subscriber => {\n        if (count === undefined) {\n            count = start;\n            start = 0;\n        }\n        let index = 0;\n        let current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index, count, start, subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    const { start, index, count, subscriber } = state;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n//# sourceMappingURL=range.js.map"]},"metadata":{},"sourceType":"module"}