{"ast":null,"code":"import _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : async;\n  var absoluteDelay = isDate(delay);\n  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return function (source) {\n    return source.lift(new DelayOperator(delayFor, scheduler));\n  };\n}\n\nvar DelayOperator = /*#__PURE__*/function () {\n  function DelayOperator(delay, scheduler) {\n    _classCallCheck(this, DelayOperator);\n\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n\n  _createClass(DelayOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n  }]);\n\n  return DelayOperator;\n}();\n\nvar DelaySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(DelaySubscriber, _Subscriber);\n\n  var _super = _createSuper(DelaySubscriber);\n\n  function DelaySubscriber(destination, delay, scheduler) {\n    var _this;\n\n    _classCallCheck(this, DelaySubscriber);\n\n    _this = _super.call(this, destination);\n    _this.delay = delay;\n    _this.scheduler = scheduler;\n    _this.queue = [];\n    _this.active = false;\n    _this.errored = false;\n    return _this;\n  }\n\n  _createClass(DelaySubscriber, [{\n    key: \"_schedule\",\n    value: function _schedule(scheduler) {\n      this.active = true;\n      var destination = this.destination;\n      destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n        source: this,\n        destination: this.destination,\n        scheduler: scheduler\n      }));\n    }\n  }, {\n    key: \"scheduleNotification\",\n    value: function scheduleNotification(notification) {\n      if (this.errored === true) {\n        return;\n      }\n\n      var scheduler = this.scheduler;\n      var message = new DelayMessage(scheduler.now() + this.delay, notification);\n      this.queue.push(message);\n\n      if (this.active === false) {\n        this._schedule(scheduler);\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      this.scheduleNotification(Notification.createNext(value));\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.errored = true;\n      this.queue = [];\n      this.destination.error(err);\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.scheduleNotification(Notification.createComplete());\n      this.unsubscribe();\n    }\n  }], [{\n    key: \"dispatch\",\n    value: function dispatch(state) {\n      var source = state.source;\n      var queue = source.queue;\n      var scheduler = state.scheduler;\n      var destination = state.destination;\n\n      while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n        queue.shift().notification.observe(destination);\n      }\n\n      if (queue.length > 0) {\n        var _delay = Math.max(0, queue[0].time - scheduler.now());\n\n        this.schedule(state, _delay);\n      } else {\n        this.unsubscribe();\n        source.active = false;\n      }\n    }\n  }]);\n\n  return DelaySubscriber;\n}(Subscriber);\n\nvar DelayMessage = /*#__PURE__*/_createClass(function DelayMessage(time, notification) {\n  _classCallCheck(this, DelayMessage);\n\n  this.time = time;\n  this.notification = notification;\n});","map":{"version":3,"sources":["../../../src/internal/operators/delay.ts"],"names":[],"mappings":"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","sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n//# sourceMappingURL=delay.js.map"]},"metadata":{},"sourceType":"module"}