{"ast":null,"code":"import _toConsumableArray from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\nexport function combineLatest() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  var project = null;\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  }\n\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n\n  return function (source) {\n    return source.lift.call(from([source].concat(_toConsumableArray(observables))), new CombineLatestOperator(project));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/combineLatest.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,qBAAT,QAAsC,6BAAtC;AACA,SAAS,IAAT,QAAqB,oBAArB;AAIA,IAAM,IAAI,GAAG,EAAb;AAoCA,OAAM,SAAU,aAAV,GAE6E;EAAA,kCAF5C,WAE4C;IAF5C,WAE4C;EAAA;;EACjF,IAAI,OAAO,GAAiC,IAA5C;;EACA,IAAI,OAAO,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlB,KAA+C,UAAnD,EAA+D;IAC7D,OAAO,GAAiC,WAAW,CAAC,GAAZ,EAAxC;EACD;;EAID,IAAI,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;IACvD,WAAW,GAAS,WAAW,CAAC,CAAD,CAAX,CAAgB,KAAhB,EAApB;EACD;;EAED,OAAO,UAAC,MAAD;IAAA,OAA2B,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAiB,IAAI,EAAE,MAAF,4BAAa,WAAb,GAArB,EAAiD,IAAI,qBAAJ,CAA0B,OAA1B,CAAjD,CAA3B;EAAA,CAAP;AACD","sourcesContent":["import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map"]},"metadata":{},"sourceType":"module"}