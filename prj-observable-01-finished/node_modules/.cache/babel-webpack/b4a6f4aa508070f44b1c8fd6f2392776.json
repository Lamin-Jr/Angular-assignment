{"ast":null,"code":"import _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nvar RepeatWhenOperator = /*#__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    _classCallCheck(this, RepeatWhenOperator);\n\n    this.notifier = notifier;\n  }\n\n  _createClass(RepeatWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n  }]);\n\n  return RepeatWhenOperator;\n}();\n\nvar RepeatWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(RepeatWhenSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(RepeatWhenSubscriber);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this;\n\n    _classCallCheck(this, RepeatWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n\n  _createClass(RepeatWhenSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.sourceIsBeingSubscribedTo = true;\n      this.source.subscribe(this);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.sourceIsBeingSubscribedTo === false) {\n        return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.sourceIsBeingSubscribedTo = false;\n\n      if (!this.isStopped) {\n        if (!this.retries) {\n          this.subscribeToRetries();\n        }\n\n        if (!this.retriesSubscription || this.retriesSubscription.closed) {\n          return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n        }\n\n        this._unsubscribeAndRecycle();\n\n        this.notifications.next(undefined);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var notifications = this.notifications,\n          retriesSubscription = this.retriesSubscription;\n\n      if (notifications) {\n        notifications.unsubscribe();\n        this.notifications = undefined;\n      }\n\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = undefined;\n      }\n\n      this.retries = undefined;\n    }\n  }, {\n    key: \"_unsubscribeAndRecycle\",\n    value: function _unsubscribeAndRecycle() {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n\n      _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"_unsubscribeAndRecycle\", this).call(this);\n\n      this._unsubscribe = _unsubscribe;\n      return this;\n    }\n  }, {\n    key: \"subscribeToRetries\",\n    value: function subscribeToRetries() {\n      this.notifications = new Subject();\n      var retries;\n\n      try {\n        var notifier = this.notifier;\n        retries = notifier(this.notifications);\n      } catch (e) {\n        return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n      }\n\n      this.retries = retries;\n      this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n  }]);\n\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,OAAT,QAAwB,YAAxB;AAIA,SAAS,qBAAT,EAAgC,cAAhC,EAAgD,qBAAhD,QAA6E,mBAA7E;AAgCA,OAAM,SAAU,UAAV,CAAwB,QAAxB,EAAqF;EACzF,OAAO,UAAC,MAAD;IAAA,OAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,kBAAJ,CAAuB,QAAvB,CAAZ,CAA3B;EAAA,CAAP;AACD;;IAEK,kB;EACJ,4BAAsB,QAAtB,EAAmF;IAAA;;IAA7D,KAAA,QAAA,GAAA,QAAA;EACrB;;;;WAED,cAAK,UAAL,EAAgC,MAAhC,EAA2C;MACzC,OAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,oBAAJ,CAAyB,UAAzB,EAAqC,KAAK,QAA1C,EAAoD,MAApD,CAAjB,CAAP;IACD;;;;;;IAQG,oB;;;;;EAOJ,8BAAY,WAAZ,EACoB,QADpB,EAEoB,MAFpB,EAEyC;IAAA;;IAAA;;IACvC,0BAAM,WAAN;IAFkB,MAAA,QAAA,GAAA,QAAA;IACA,MAAA,MAAA,GAAA,MAAA;IAJZ,MAAA,yBAAA,GAAqC,IAArC;IAIiC;EAExC;;;;WAED,sBAAU;MACR,KAAK,yBAAL,GAAiC,IAAjC;MACA,KAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;IACD;;;WAED,0BAAc;MACZ,IAAI,KAAK,yBAAL,KAAmC,KAAvC,EAA8C;QAC5C;MACD;IACF;;;WAED,oBAAQ;MACN,KAAK,yBAAL,GAAiC,KAAjC;;MAEA,IAAI,CAAC,KAAK,SAAV,EAAqB;QACnB,IAAI,CAAC,KAAK,OAAV,EAAmB;UACjB,KAAK,kBAAL;QACD;;QACD,IAAI,CAAC,KAAK,mBAAN,IAA6B,KAAK,mBAAL,CAAyB,MAA1D,EAAkE;UAChE;QACD;;QAED,KAAK,sBAAL;;QACA,KAAK,aAAL,CAAoB,IAApB,CAAyB,SAAzB;MACD;IACF;;;WAGD,wBAAY;MACV,IAAQ,aAAR,GAA+C,IAA/C,CAAQ,aAAR;MAAA,IAAuB,mBAAvB,GAA+C,IAA/C,CAAuB,mBAAvB;;MACA,IAAI,aAAJ,EAAmB;QACjB,aAAa,CAAC,WAAd;QACA,KAAK,aAAL,GAAqB,SAArB;MACD;;MACD,IAAI,mBAAJ,EAAyB;QACvB,mBAAmB,CAAC,WAApB;QACA,KAAK,mBAAL,GAA2B,SAA3B;MACD;;MACD,KAAK,OAAL,GAAe,SAAf;IACD;;;WAGD,kCAAsB;MACpB,IAAQ,YAAR,GAAyB,IAAzB,CAAQ,YAAR;MAEA,KAAK,YAAL,GAAoB,IAApB;;MACA;;MACA,KAAK,YAAL,GAAoB,YAApB;MAEA,OAAO,IAAP;IACD;;;WAEO,8BAAkB;MACxB,KAAK,aAAL,GAAqB,IAAI,OAAJ,EAArB;MACA,IAAI,OAAJ;;MACA,IAAI;QACF,IAAQ,QAAR,GAAqB,IAArB,CAAQ,QAAR;QACA,OAAO,GAAG,QAAQ,CAAC,KAAK,aAAN,CAAlB;MACD,CAHD,CAGE,OAAO,CAAP,EAAU;QACV;MACD;;MACD,KAAK,OAAL,GAAe,OAAf;MACA,KAAK,mBAAL,GAA2B,cAAc,CAAC,OAAD,EAAU,IAAI,qBAAJ,CAA0B,IAA1B,CAAV,CAAzC;IACD;;;;EA5EsC,qB","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext() {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete() {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next(undefined);\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"module"}