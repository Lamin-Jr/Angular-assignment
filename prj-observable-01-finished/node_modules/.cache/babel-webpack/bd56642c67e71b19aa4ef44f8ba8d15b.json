{"ast":null,"code":"import _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n  return function (source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nvar TakeOperator = /*#__PURE__*/function () {\n  function TakeOperator(total) {\n    _classCallCheck(this, TakeOperator);\n\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  _createClass(TakeOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n  }]);\n\n  return TakeOperator;\n}();\n\nvar TakeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(TakeSubscriber, _Subscriber);\n\n  var _super = _createSuper(TakeSubscriber);\n\n  function TakeSubscriber(destination, total) {\n    var _this;\n\n    _classCallCheck(this, TakeSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.total = total;\n    _this.count = 0;\n    return _this;\n  }\n\n  _createClass(TakeSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var total = this.total;\n      var count = ++this.count;\n\n      if (count <= total) {\n        this.destination.next(value);\n\n        if (count === total) {\n          this.destination.complete();\n          this.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return TakeSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/take.ts"],"names":[],"mappings":";;;;AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,uBAAT,QAAwC,iCAAxC;AACA,SAAS,KAAT,QAAsB,qBAAtB;AAkDA,OAAM,SAAU,IAAV,CAAkB,KAAlB,EAA+B;EACnC,OAAO,UAAC,MAAD,EAA0B;IAC/B,IAAI,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO,KAAK,EAAZ;IACD,CAFD,MAEO;MACL,OAAO,MAAM,CAAC,IAAP,CAAY,IAAI,YAAJ,CAAiB,KAAjB,CAAZ,CAAP;IACD;EACF,CAND;AAOD;;IAEK,Y;EACJ,sBAAoB,KAApB,EAAiC;IAAA;;IAAb,KAAA,KAAA,GAAA,KAAA;;IAClB,IAAI,KAAK,KAAL,GAAa,CAAjB,EAAoB;MAClB,MAAM,IAAI,uBAAJ,EAAN;IACD;EACF;;;;WAED,cAAK,UAAL,EAAgC,MAAhC,EAA2C;MACzC,OAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,KAAK,KAApC,CAAjB,CAAP;IACD;;;;;;IAQG,c;;;;;EAGJ,wBAAY,WAAZ,EAAgD,KAAhD,EAA6D;IAAA;;IAAA;;IAC3D,0BAAM,WAAN;IAD8C,MAAA,KAAA,GAAA,KAAA;IAFxC,MAAA,KAAA,GAAgB,CAAhB;IAEqD;EAE5D;;;;WAES,eAAM,KAAN,EAAc;MACtB,IAAM,KAAK,GAAG,KAAK,KAAnB;MACA,IAAM,KAAK,GAAG,EAAE,KAAK,KAArB;;MACA,IAAI,KAAK,IAAI,KAAb,EAAoB;QAClB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;;QACA,IAAI,KAAK,KAAK,KAAd,EAAqB;UACnB,KAAK,WAAL,CAAiB,QAAjB;UACA,KAAK,WAAL;QACD;MACF;IACF;;;;EAjB6B,U","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map"]},"metadata":{},"sourceType":"module"}