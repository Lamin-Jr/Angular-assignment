{"ast":null,"code":"import _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nexport var MergeScanOperator = /*#__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    _classCallCheck(this, MergeScanOperator);\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  _createClass(MergeScanOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n  }]);\n\n  return MergeScanOperator;\n}();\nexport var MergeScanSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeScanSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(MergeScanSubscriber);\n\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this;\n\n    _classCallCheck(this, MergeScanSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(MergeScanSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        var index = this.index++;\n        var destination = this.destination;\n        var ish;\n\n        try {\n          var accumulator = this.accumulator;\n          ish = accumulator(this.acc, value, index);\n        } catch (e) {\n          return destination.error(e);\n        }\n\n        this.active++;\n\n        this._innerSub(ish);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.active === 0 && this.buffer.length === 0) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      var destination = this.destination;\n      this.acc = innerValue;\n      this.hasValue = true;\n      destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/mergeScan.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeScan.js.map"]},"metadata":{},"sourceType":"module"}