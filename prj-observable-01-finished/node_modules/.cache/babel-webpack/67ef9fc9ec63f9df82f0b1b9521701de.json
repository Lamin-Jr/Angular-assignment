{"ast":null,"code":"import _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nexport var MergeMapOperator = /*#__PURE__*/function () {\n  function MergeMapOperator(project) {\n    var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n\n    _classCallCheck(this, MergeMapOperator);\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  _createClass(MergeMapOperator, [{\n    key: \"call\",\n    value: function call(observer, source) {\n      return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n  }]);\n\n  return MergeMapOperator;\n}();\nexport var MergeMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeMapSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(MergeMapSubscriber);\n\n  function MergeMapSubscriber(destination, project) {\n    var _this;\n\n    var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n\n    _classCallCheck(this, MergeMapSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(MergeMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        this._tryNext(value);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_tryNext\",\n    value: function _tryNext(value) {\n      var result;\n      var index = this.index++;\n\n      try {\n        result = this.project(value, index);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.active++;\n\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.active === 0 && this.buffer.length === 0) {\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\nexport var flatMap = mergeMap;","map":{"version":3,"sources":["../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\nexport const flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"module"}