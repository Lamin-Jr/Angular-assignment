{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n  if (!scheduler) {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length && !subscriber.closed; i++) {\n        var key = keys[i];\n\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n\n      subscriber.complete();\n    });\n  } else {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n      var subscription = new Subscription();\n      subscription.add(scheduler.schedule(dispatch, 0, {\n        keys: keys,\n        index: 0,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n      return subscription;\n    });\n  }\n}\nexport function dispatch(state) {\n  var keys = state.keys,\n      index = state.index,\n      subscriber = state.subscriber,\n      subscription = state.subscription,\n      obj = state.obj;\n\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      var key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({\n        keys: keys,\n        index: index + 1,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/internal/observable/pairs.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAGA,SAAS,YAAT,QAA6B,iBAA7B;AAkDA,OAAM,SAAU,KAAV,CAAmB,GAAnB,EAAgC,SAAhC,EAAyD;EAC7D,IAAI,CAAC,SAAL,EAAgB;IACd,OAAO,IAAI,UAAJ,CAA4B,UAAA,UAAU,EAAG;MAC9C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAb;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAT,IAAmB,CAAC,UAAU,CAAC,MAA/C,EAAuD,CAAC,EAAxD,EAA4D;QAC1D,IAAM,GAAG,GAAG,IAAI,CAAC,CAAD,CAAhB;;QACA,IAAI,GAAG,CAAC,cAAJ,CAAmB,GAAnB,CAAJ,EAA6B;UAC3B,UAAU,CAAC,IAAX,CAAgB,CAAC,GAAD,EAAM,GAAG,CAAC,GAAD,CAAT,CAAhB;QACD;MACF;;MACD,UAAU,CAAC,QAAX;IACD,CATM,CAAP;EAUD,CAXD,MAWO;IACL,OAAO,IAAI,UAAJ,CAA4B,UAAA,UAAU,EAAG;MAC9C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAb;MACA,IAAM,YAAY,GAAG,IAAI,YAAJ,EAArB;MACA,YAAY,CAAC,GAAb,CACE,SAAS,CAAC,QAAV,CACG,QADH,EACa,CADb,EACgB;QAAE,IAAI,EAAJ,IAAF;QAAQ,KAAK,EAAE,CAAf;QAAkB,UAAU,EAAV,UAAlB;QAA8B,YAAY,EAAZ,YAA9B;QAA4C,GAAG,EAAH;MAA5C,CADhB,CADF;MAGA,OAAO,YAAP;IACD,CAPM,CAAP;EAQD;AACF;AAGD,OAAM,SAAU,QAAV,CACsB,KADtB,EAC4I;EAChJ,IAAQ,IAAR,GAAuD,KAAvD,CAAQ,IAAR;EAAA,IAAc,KAAd,GAAuD,KAAvD,CAAc,KAAd;EAAA,IAAqB,UAArB,GAAuD,KAAvD,CAAqB,UAArB;EAAA,IAAiC,YAAjC,GAAuD,KAAvD,CAAiC,YAAjC;EAAA,IAA+C,GAA/C,GAAuD,KAAvD,CAA+C,GAA/C;;EACA,IAAI,CAAC,UAAU,CAAC,MAAhB,EAAwB;IACtB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAjB,EAAyB;MACvB,IAAM,GAAG,GAAG,IAAI,CAAC,KAAD,CAAhB;MACA,UAAU,CAAC,IAAX,CAAgB,CAAC,GAAD,EAAM,GAAG,CAAC,GAAD,CAAT,CAAhB;MACA,YAAY,CAAC,GAAb,CAAiB,KAAK,QAAL,CAAc;QAAE,IAAI,EAAJ,IAAF;QAAQ,KAAK,EAAE,KAAK,GAAG,CAAvB;QAA0B,UAAU,EAAV,UAA1B;QAAsC,YAAY,EAAZ,YAAtC;QAAoD,GAAG,EAAH;MAApD,CAAd,CAAjB;IACD,CAJD,MAIO;MACL,UAAU,CAAC,QAAX;IACD;EACF;AACF","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscriber => {\n            const keys = Object.keys(obj);\n            for (let i = 0; i < keys.length && !subscriber.closed; i++) {\n                const key = keys[i];\n                if (obj.hasOwnProperty(key)) {\n                    subscriber.next([key, obj[key]]);\n                }\n            }\n            subscriber.complete();\n        });\n    }\n    else {\n        return new Observable(subscriber => {\n            const keys = Object.keys(obj);\n            const subscription = new Subscription();\n            subscription.add(scheduler.schedule(dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\n            return subscription;\n        });\n    }\n}\nexport function dispatch(state) {\n    const { keys, index, subscriber, subscription, obj } = state;\n    if (!subscriber.closed) {\n        if (index < keys.length) {\n            const key = keys[index];\n            subscriber.next([key, obj[key]]);\n            subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\n        }\n        else {\n            subscriber.complete();\n        }\n    }\n}\n//# sourceMappingURL=pairs.js.map"]},"metadata":{},"sourceType":"module"}