{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_ref) {\n  var _ref$bufferSize = _ref.bufferSize,\n      bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,\n      _ref$windowTime = _ref.windowTime,\n      windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,\n      useRefCount = _ref.refCount,\n      scheduler = _ref.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/shareReplay.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,kBAA9B;AAiEA,OAAM,SAAU,WAAV,CACJ,kBADI,EAEJ,UAFI,EAGJ,SAHI,EAGqB;EAEzB,IAAI,MAAJ;;EACA,IAAI,kBAAkB,IAAI,OAAO,kBAAP,KAA8B,QAAxD,EAAkE;IAChE,MAAM,GAAG,kBAAT;EACD,CAFD,MAEO;IACL,MAAM,GAAG;MACP,UAAU,EAAE,kBADL;MAEP,UAAU,EAAV,UAFO;MAGP,QAAQ,EAAE,KAHH;MAIP,SAAS,EAAT;IAJO,CAAT;EAMD;;EACD,OAAO,UAAC,MAAD;IAAA,OAA2B,MAAM,CAAC,IAAP,CAAY,mBAAmB,CAAC,MAAD,CAA/B,CAA3B;EAAA,CAAP;AACD;;AAED,SAAS,mBAAT,OAKoB;EAAA,2BAJlB,UAIkB;EAAA,IAJlB,UAIkB,gCAJL,MAAM,CAAC,iBAIF;EAAA,2BAHlB,UAGkB;EAAA,IAHlB,UAGkB,gCAHL,MAAM,CAAC,iBAGF;EAAA,IAFR,WAEQ,QAFlB,QAEkB;EAAA,IADlB,SACkB,QADlB,SACkB;EAClB,IAAI,OAAJ;EACA,IAAI,QAAQ,GAAG,CAAf;EACA,IAAI,YAAJ;EACA,IAAI,QAAQ,GAAG,KAAf;EACA,IAAI,UAAU,GAAG,KAAjB;EAEA,OAAO,SAAS,oBAAT,CAEL,MAFK,EAEgB;IAErB,QAAQ;IACR,IAAI,QAAJ;;IACA,IAAI,CAAC,OAAD,IAAY,QAAhB,EAA0B;MACxB,QAAQ,GAAG,KAAX;MACA,OAAO,GAAG,IAAI,aAAJ,CAAqB,UAArB,EAAiC,UAAjC,EAA6C,SAA7C,CAAV;MACA,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAX;MACA,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB;QAC9B,IAD8B,gBACzB,KADyB,EACpB;UACR,OAAO,CAAC,IAAR,CAAa,KAAb;QACD,CAH6B;QAI9B,KAJ8B,iBAIxB,GAJwB,EAIrB;UACP,QAAQ,GAAG,IAAX;UACA,OAAO,CAAC,KAAR,CAAc,GAAd;QACD,CAP6B;QAQ9B,QAR8B,sBAQtB;UACN,UAAU,GAAG,IAAb;UACA,YAAY,GAAG,SAAf;UACA,OAAO,CAAC,QAAR;QACD;MAZ6B,CAAjB,CAAf;;MAmBA,IAAI,UAAJ,EAAgB;QACd,YAAY,GAAG,SAAf;MACD;IACF,CA1BD,MA0BO;MACL,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAX;IACD;;IAED,KAAK,GAAL,CAAS,YAAK;MACZ,QAAQ;MACR,QAAQ,CAAC,WAAT;MACA,QAAQ,GAAG,SAAX;;MACA,IAAI,YAAY,IAAI,CAAC,UAAjB,IAA+B,WAA/B,IAA8C,QAAQ,KAAK,CAA/D,EAAkE;QAChE,YAAY,CAAC,WAAb;QACA,YAAY,GAAG,SAAf;QACA,OAAO,GAAG,SAAV;MACD;IACF,CATD;EAUD,CA9CD;AA+CD","sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler,\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler, }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        let innerSub;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            innerSub = subject.subscribe(this);\n            subscription = source.subscribe({\n                next(value) {\n                    subject.next(value);\n                },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n            if (isComplete) {\n                subscription = undefined;\n            }\n        }\n        else {\n            innerSub = subject.subscribe(this);\n        }\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            innerSub = undefined;\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"module"}