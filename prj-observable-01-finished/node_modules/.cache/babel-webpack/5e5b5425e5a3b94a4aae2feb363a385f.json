{"ast":null,"code":"import _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nexport var MulticastOperator = /*#__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    _classCallCheck(this, MulticastOperator);\n\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  _createClass(MulticastOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var selector = this.selector;\n      var subject = this.subjectFactory();\n      var subscription = selector(subject).subscribe(subscriber);\n      subscription.add(source.subscribe(subject));\n      return subscription;\n    }\n  }]);\n\n  return MulticastOperator;\n}();","map":{"version":3,"sources":["../../../src/internal/operators/multicast.ts"],"names":[],"mappings":";;AAIA,SAAgC,+BAAhC,QAAuE,qCAAvE;AA6BA,OAAM,SAAU,SAAV,CAA0B,uBAA1B,EAC0B,QAD1B,EAC6E;EACjF,OAAO,SAAS,yBAAT,CAAmC,MAAnC,EAAwD;IAC7D,IAAI,cAAJ;;IACA,IAAI,OAAO,uBAAP,KAAmC,UAAvC,EAAmD;MACjD,cAAc,GAAqB,uBAAnC;IACD,CAFD,MAEO;MACL,cAAc,GAAG,SAAS,cAAT,GAAuB;QACtC,OAAmB,uBAAnB;MACD,CAFD;IAGD;;IAED,IAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;MAClC,OAAO,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,cAAtB,EAAsC,QAAtC,CAAZ,CAAP;IACD;;IAED,IAAM,WAAW,GAAQ,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,+BAAtB,CAAzB;IACA,WAAW,CAAC,MAAZ,GAAqB,MAArB;IACA,WAAW,CAAC,cAAZ,GAA6B,cAA7B;IAEA,OAAkC,WAAlC;EACD,CAnBD;AAoBD;AAED,WAAa,iBAAb;EACE,2BAAoB,cAApB,EACoB,QADpB,EACsE;IAAA;;IADlD,KAAA,cAAA,GAAA,cAAA;IACA,KAAA,QAAA,GAAA,QAAA;EACnB;;EAHH;IAAA;IAAA,OAIE,cAAK,UAAL,EAAgC,MAAhC,EAA2C;MACzC,IAAQ,QAAR,GAAqB,IAArB,CAAQ,QAAR;MACA,IAAM,OAAO,GAAG,KAAK,cAAL,EAAhB;MACA,IAAM,YAAY,GAAG,QAAQ,CAAC,OAAD,CAAR,CAAkB,SAAlB,CAA4B,UAA5B,CAArB;MACA,YAAY,CAAC,GAAb,CAAiB,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAAjB;MACA,OAAO,YAAP;IACD;EAVH;;EAAA;AAAA","sourcesContent":["import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map"]},"metadata":{},"sourceType":"module"}