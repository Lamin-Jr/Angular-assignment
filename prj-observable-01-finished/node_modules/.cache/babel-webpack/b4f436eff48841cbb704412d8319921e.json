{"ast":null,"code":"import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function subscribeToIterable(iterable) {\n  return function (subscriber) {\n    var iterator = iterable[Symbol_iterator]();\n\n    do {\n      var item = void 0;\n\n      try {\n        item = iterator.next();\n      } catch (err) {\n        subscriber.error(err);\n        return subscriber;\n      }\n\n      if (item.done) {\n        subscriber.complete();\n        break;\n      }\n\n      subscriber.next(item.value);\n\n      if (subscriber.closed) {\n        break;\n      }\n    } while (true);\n\n    if (typeof iterator.return === 'function') {\n      subscriber.add(function () {\n        if (iterator.return) {\n          iterator.return();\n        }\n      });\n    }\n\n    return subscriber;\n  };\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeToIterable.ts"],"names":[],"mappings":"AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AAEA,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAI,QAAJ;EAAA,OAA8B,UAAC,UAAD,EAA8B;IAC7F,IAAM,QAAQ,GAAI,QAAgB,CAAC,eAAD,CAAhB,EAAlB;;IAEA,GAAG;MACD,IAAI,IAAuB,SAA3B;;MACA,IAAI;QACF,IAAI,GAAG,QAAQ,CAAC,IAAT,EAAP;MACD,CAFD,CAEE,OAAO,GAAP,EAAY;QACZ,UAAU,CAAC,KAAX,CAAiB,GAAjB;QACA,OAAO,UAAP;MACD;;MACD,IAAI,IAAI,CAAC,IAAT,EAAe;QACb,UAAU,CAAC,QAAX;QACA;MACD;;MACD,UAAU,CAAC,IAAX,CAAgB,IAAI,CAAC,KAArB;;MACA,IAAI,UAAU,CAAC,MAAf,EAAuB;QACrB;MACD;IACF,CAhBD,QAgBS,IAhBT;;IAmBA,IAAI,OAAO,QAAQ,CAAC,MAAhB,KAA2B,UAA/B,EAA2C;MACzC,UAAU,CAAC,GAAX,CAAe,YAAK;QAClB,IAAI,QAAQ,CAAC,MAAb,EAAqB;UACnB,QAAQ,CAAC,MAAT;QACD;MACF,CAJD;IAKD;;IAED,OAAO,UAAP;EACD,CA/BkC;AAAA,CAA5B","sourcesContent":["import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        let item;\n        try {\n            item = iterator.next();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return subscriber;\n        }\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map"]},"metadata":{},"sourceType":"module"}