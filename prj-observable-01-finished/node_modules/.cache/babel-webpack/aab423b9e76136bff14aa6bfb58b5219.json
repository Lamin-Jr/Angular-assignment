{"ast":null,"code":"import _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport var Observable = /*#__PURE__*/function () {\n  function Observable(subscribe) {\n    _classCallCheck(this, Observable);\n\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  _createClass(Observable, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var observable = new Observable();\n      observable.source = this;\n      observable.operator = operator;\n      return observable;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observerOrNext, error, complete) {\n      var operator = this.operator;\n      var sink = toSubscriber(observerOrNext, error, complete);\n\n      if (operator) {\n        sink.add(operator.call(sink, this.source));\n      } else {\n        sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n      }\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        if (sink.syncErrorThrowable) {\n          sink.syncErrorThrowable = false;\n\n          if (sink.syncErrorThrown) {\n            throw sink.syncErrorValue;\n          }\n        }\n      }\n\n      return sink;\n    }\n  }, {\n    key: \"_trySubscribe\",\n    value: function _trySubscribe(sink) {\n      try {\n        return this._subscribe(sink);\n      } catch (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n          sink.syncErrorThrown = true;\n          sink.syncErrorValue = err;\n        }\n\n        if (canReportError(sink)) {\n          sink.error(err);\n        } else {\n          console.warn(err);\n        }\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(next, promiseCtor) {\n      var _this = this;\n\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor(function (resolve, reject) {\n        var subscription;\n        subscription = _this.subscribe(function (value) {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n\n            if (subscription) {\n              subscription.unsubscribe();\n            }\n          }\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var source = this.source;\n      return source && source.subscribe(subscriber);\n    }\n  }, {\n    key: Symbol_observable,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"pipe\",\n    value: function pipe() {\n      for (var _len = arguments.length, operations = new Array(_len), _key = 0; _key < _len; _key++) {\n        operations[_key] = arguments[_key];\n      }\n\n      if (operations.length === 0) {\n        return this;\n      }\n\n      return pipeFromArray(operations)(this);\n    }\n  }, {\n    key: \"toPromise\",\n    value: function toPromise(promiseCtor) {\n      var _this2 = this;\n\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor(function (resolve, reject) {\n        var value;\n\n        _this2.subscribe(function (x) {\n          return value = x;\n        }, function (err) {\n          return reject(err);\n        }, function () {\n          return resolve(value);\n        });\n      });\n    }\n  }]);\n\n  return Observable;\n}();\n\nObservable.create = function (subscribe) {\n  return new Observable(subscribe);\n};\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}","map":{"version":3,"sources":["../../src/internal/Observable.ts"],"names":[],"mappings":"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","sourcesContent":["import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map"]},"metadata":{},"sourceType":"module"}