{"ast":null,"code":"import { map } from './map';\nexport function pluck() {\n  for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n\n  var length = properties.length;\n\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n\n  return function (source) {\n    return map(plucker(properties, length))(source);\n  };\n}\n\nfunction plucker(props, length) {\n  var mapper = function mapper(x) {\n    var currentProp = x;\n\n    for (var i = 0; i < length; i++) {\n      var p = currentProp != null ? currentProp[props[i]] : undefined;\n\n      if (p !== void 0) {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n\n    return currentProp;\n  };\n\n  return mapper;\n}","map":{"version":3,"sources":["../../../src/internal/operators/pluck.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,QAAoB,OAApB;AA6CA,OAAM,SAAU,KAAV,GAA6C;EAAA,kCAApB,UAAoB;IAApB,UAAoB;EAAA;;EACjD,IAAM,MAAM,GAAG,UAAU,CAAC,MAA1B;;EACA,IAAI,MAAM,KAAK,CAAf,EAAkB;IAChB,MAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;EACD;;EACD,OAAO,UAAC,MAAD;IAAA,OAA2B,GAAG,CAAC,OAAO,CAAC,UAAD,EAAa,MAAb,CAAR,CAAH,CAAiC,MAAjC,CAA3B;EAAA,CAAP;AACD;;AAED,SAAS,OAAT,CAAiB,KAAjB,EAAkC,MAAlC,EAAgD;EAC9C,IAAM,MAAM,GAAG,SAAT,MAAS,CAAC,CAAD,EAAc;IAC3B,IAAI,WAAW,GAAG,CAAlB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;MAC/B,IAAM,CAAC,GAAG,WAAW,IAAI,IAAf,GAAsB,WAAW,CAAC,KAAK,CAAC,CAAD,CAAN,CAAjC,GAA8C,SAAxD;;MACA,IAAI,CAAC,KAAK,KAAK,CAAf,EAAkB;QAChB,WAAW,GAAG,CAAd;MACD,CAFD,MAEO;QACL,OAAO,SAAP;MACD;IACF;;IACD,OAAO,WAAP;EACD,CAXD;;EAaA,OAAO,MAAP;AACD","sourcesContent":["import { map } from './map';\nexport function pluck(...properties) {\n    const length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return (source) => map(plucker(properties, length))(source);\n}\nfunction plucker(props, length) {\n    const mapper = (x) => {\n        let currentProp = x;\n        for (let i = 0; i < length; i++) {\n            const p = currentProp != null ? currentProp[props[i]] : undefined;\n            if (p !== void 0) {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map"]},"metadata":{},"sourceType":"module"}