{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  var last = observables[observables.length - 1];\n\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n}","map":{"version":3,"sources":["../../../src/internal/observable/merge.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,QAAT,QAAyB,uBAAzB;AACA,SAAS,SAAT,QAA0B,aAA1B;AAqHA,OAAM,SAAU,KAAV,GAA0F;EAC/F,IAAI,UAAU,GAAG,MAAM,CAAC,iBAAxB;EACA,IAAI,SAAS,GAAkB,IAA/B;;EAF+F,kCAAjE,WAAiE;IAAjE,WAAiE;EAAA;;EAG9F,IAAI,IAAI,GAAQ,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAA3B;;EACA,IAAI,WAAW,CAAC,IAAD,CAAf,EAAuB;IACrB,SAAS,GAAkB,WAAW,CAAC,GAAZ,EAA3B;;IACA,IAAI,WAAW,CAAC,MAAZ,GAAqB,CAArB,IAA0B,OAAO,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlB,KAA+C,QAA7E,EAAuF;MACrF,UAAU,GAAW,WAAW,CAAC,GAAZ,EAArB;IACD;EACF,CALD,MAKO,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;IACnC,UAAU,GAAW,WAAW,CAAC,GAAZ,EAArB;EACD;;EAED,IAAI,SAAS,KAAK,IAAd,IAAsB,WAAW,CAAC,MAAZ,KAAuB,CAA7C,IAAkD,WAAW,CAAC,CAAD,CAAX,YAA0B,UAAhF,EAA4F;IAC1F,OAAsB,WAAW,CAAC,CAAD,CAAjC;EACD;;EAED,OAAO,QAAQ,CAAI,UAAJ,CAAR,CAAwB,SAAS,CAAM,WAAN,EAAmB,SAAnB,CAAjC,CAAP;AACD","sourcesContent":["import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge(...observables) {\n    let concurrent = Number.POSITIVE_INFINITY;\n    let scheduler = null;\n    let last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}