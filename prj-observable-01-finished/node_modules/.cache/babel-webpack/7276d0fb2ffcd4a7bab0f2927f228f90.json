{"ast":null,"code":"import _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nexport function retry() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n  return function (source) {\n    return source.lift(new RetryOperator(count, source));\n  };\n}\n\nvar RetryOperator = /*#__PURE__*/function () {\n  function RetryOperator(count, source) {\n    _classCallCheck(this, RetryOperator);\n\n    this.count = count;\n    this.source = source;\n  }\n\n  _createClass(RetryOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n  }]);\n\n  return RetryOperator;\n}();\n\nvar RetrySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(RetrySubscriber, _Subscriber);\n\n  var _super = _createSuper(RetrySubscriber);\n\n  function RetrySubscriber(destination, count, source) {\n    var _this;\n\n    _classCallCheck(this, RetrySubscriber);\n\n    _this = _super.call(this, destination);\n    _this.count = count;\n    _this.source = source;\n    return _this;\n  }\n\n  _createClass(RetrySubscriber, [{\n    key: \"error\",\n    value: function error(err) {\n      if (!this.isStopped) {\n        var source = this.source,\n            count = this.count;\n\n        if (count === 0) {\n          return _get(_getPrototypeOf(RetrySubscriber.prototype), \"error\", this).call(this, err);\n        } else if (count > -1) {\n          this.count = count - 1;\n        }\n\n        source.subscribe(this._unsubscribeAndRecycle());\n      }\n    }\n  }]);\n\n  return RetrySubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retry.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,UAAT,QAA2B,eAA3B;AAmDA,OAAM,SAAU,KAAV,GAAqC;EAAA,IAAlB,KAAkB,uEAAF,CAAC,CAAC;EACzC,OAAO,UAAC,MAAD;IAAA,OAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,aAAJ,CAAkB,KAAlB,EAAyB,MAAzB,CAAZ,CAA3B;EAAA,CAAP;AACD;;IAEK,a;EACJ,uBAAoB,KAApB,EACoB,MADpB,EACyC;IAAA;;IADrB,KAAA,KAAA,GAAA,KAAA;IACA,KAAA,MAAA,GAAA,MAAA;EACnB;;;;WAED,cAAK,UAAL,EAAgC,MAAhC,EAA2C;MACzC,OAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,eAAJ,CAAoB,UAApB,EAAgC,KAAK,KAArC,EAA4C,KAAK,MAAjD,CAAjB,CAAP;IACD;;;;;;IAQG,e;;;;;EACJ,yBAAY,WAAZ,EACoB,KADpB,EAEoB,MAFpB,EAEyC;IAAA;;IAAA;;IACvC,0BAAM,WAAN;IAFkB,MAAA,KAAA,GAAA,KAAA;IACA,MAAA,MAAA,GAAA,MAAA;IAAqB;EAExC;;;;WACD,eAAM,GAAN,EAAc;MACZ,IAAI,CAAC,KAAK,SAAV,EAAqB;QACnB,IAAQ,MAAR,GAA0B,IAA1B,CAAQ,MAAR;QAAA,IAAgB,KAAhB,GAA0B,IAA1B,CAAgB,KAAhB;;QACA,IAAI,KAAK,KAAK,CAAd,EAAiB;UACf,kFAAmB,GAAnB;QACD,CAFD,MAEO,IAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;UACrB,KAAK,KAAL,GAAa,KAAK,GAAG,CAArB;QACD;;QACD,MAAM,CAAC,SAAP,CAAiB,KAAK,sBAAL,EAAjB;MACD;IACF;;;;EAhB8B,U","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n    return (source) => source.lift(new RetryOperator(count, source));\n}\nclass RetryOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RetrySubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.error(err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}