{"ast":null,"code":"import _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project) {\n  var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\nexport var ExpandOperator = /*#__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    _classCallCheck(this, ExpandOperator);\n\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n\n  _createClass(ExpandOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n  }]);\n\n  return ExpandOperator;\n}();\nexport var ExpandSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(ExpandSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(ExpandSubscriber);\n\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this;\n\n    _classCallCheck(this, ExpandSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n\n    return _this;\n  }\n\n  _createClass(ExpandSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var destination = this.destination;\n\n      if (destination.closed) {\n        this._complete();\n\n        return;\n      }\n\n      var index = this.index++;\n\n      if (this.active < this.concurrent) {\n        destination.next(value);\n\n        try {\n          var project = this.project;\n          var result = project(value, index);\n\n          if (!this.scheduler) {\n            this.subscribeToProjection(result, value, index);\n          } else {\n            var state = {\n              subscriber: this,\n              result: result,\n              value: value,\n              index: index\n            };\n            var _destination = this.destination;\n\n            _destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n          }\n        } catch (e) {\n          destination.error(e);\n        }\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"subscribeToProjection\",\n    value: function subscribeToProjection(result, value, index) {\n      this.active++;\n      var destination = this.destination;\n      destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.hasCompleted && this.active === 0) {\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this._next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n\n      if (buffer && buffer.length > 0) {\n        this._next(buffer.shift());\n      }\n\n      if (this.hasCompleted && this.active === 0) {\n        this.destination.complete();\n      }\n    }\n  }], [{\n    key: \"dispatch\",\n    value: function dispatch(arg) {\n      var subscriber = arg.subscriber,\n          result = arg.result,\n          value = arg.value,\n          index = arg.index;\n      subscriber.subscribeToProjection(result, value, index);\n    }\n  }]);\n\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/expand.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this._next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=expand.js.map"]},"metadata":{},"sourceType":"module"}