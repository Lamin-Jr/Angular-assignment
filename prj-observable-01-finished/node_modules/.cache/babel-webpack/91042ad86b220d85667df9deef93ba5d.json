{"ast":null,"code":"import { Observable } from '../Observable';\nimport { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n  var resultSelector;\n  var initialState;\n\n  if (arguments.length == 1) {\n    var options = initialStateOrOptions;\n    initialState = options.initialState;\n    condition = options.condition;\n    iterate = options.iterate;\n    resultSelector = options.resultSelector || identity;\n    scheduler = options.scheduler;\n  } else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n    initialState = initialStateOrOptions;\n    resultSelector = identity;\n    scheduler = resultSelectorOrObservable;\n  } else {\n    initialState = initialStateOrOptions;\n    resultSelector = resultSelectorOrObservable;\n  }\n\n  return new Observable(function (subscriber) {\n    var state = initialState;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        subscriber: subscriber,\n        iterate: iterate,\n        condition: condition,\n        resultSelector: resultSelector,\n        state: state\n      });\n    }\n\n    do {\n      if (condition) {\n        var conditionResult = void 0;\n\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return undefined;\n        }\n\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n\n      var value = void 0;\n\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n\n      subscriber.next(value);\n\n      if (subscriber.closed) {\n        break;\n      }\n\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n    } while (true);\n\n    return undefined;\n  });\n}\n\nfunction dispatch(state) {\n  var subscriber = state.subscriber,\n      condition = state.condition;\n\n  if (subscriber.closed) {\n    return undefined;\n  }\n\n  if (state.needIterate) {\n    try {\n      state.state = state.iterate(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n  } else {\n    state.needIterate = true;\n  }\n\n  if (condition) {\n    var conditionResult;\n\n    try {\n      conditionResult = condition(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    if (!conditionResult) {\n      subscriber.complete();\n      return undefined;\n    }\n\n    if (subscriber.closed) {\n      return undefined;\n    }\n  }\n\n  var value;\n\n  try {\n    value = state.resultSelector(state.state);\n  } catch (err) {\n    subscriber.error(err);\n    return undefined;\n  }\n\n  if (subscriber.closed) {\n    return undefined;\n  }\n\n  subscriber.next(value);\n\n  if (subscriber.closed) {\n    return undefined;\n  }\n\n  return this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/generate.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n    let resultSelector;\n    let initialState;\n    if (arguments.length == 1) {\n        const options = initialStateOrOptions;\n        initialState = options.initialState;\n        condition = options.condition;\n        iterate = options.iterate;\n        resultSelector = options.resultSelector || identity;\n        scheduler = options.scheduler;\n    }\n    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n        initialState = initialStateOrOptions;\n        resultSelector = identity;\n        scheduler = resultSelectorOrObservable;\n    }\n    else {\n        initialState = initialStateOrOptions;\n        resultSelector = resultSelectorOrObservable;\n    }\n    return new Observable(subscriber => {\n        let state = initialState;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                subscriber,\n                iterate,\n                condition,\n                resultSelector,\n                state\n            });\n        }\n        do {\n            if (condition) {\n                let conditionResult;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return undefined;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            let value;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return undefined;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return undefined;\n            }\n        } while (true);\n        return undefined;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n        return undefined;\n    }\n    if (state.needIterate) {\n        try {\n            state.state = state.iterate(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n    }\n    else {\n        state.needIterate = true;\n    }\n    if (condition) {\n        let conditionResult;\n        try {\n            conditionResult = condition(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!conditionResult) {\n            subscriber.complete();\n            return undefined;\n        }\n        if (subscriber.closed) {\n            return undefined;\n        }\n    }\n    let value;\n    try {\n        value = state.resultSelector(state.state);\n    }\n    catch (err) {\n        subscriber.error(err);\n        return undefined;\n    }\n    if (subscriber.closed) {\n        return undefined;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n        return undefined;\n    }\n    return this.schedule(state);\n}\n//# sourceMappingURL=generate.js.map"]},"metadata":{},"sourceType":"module"}