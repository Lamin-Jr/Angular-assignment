{"ast":null,"code":"import _get from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/momodoujammeh/Developement/angular/Assignments/prj-observable-01-finished/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\n\nvar GroupByOperator = /*#__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    _classCallCheck(this, GroupByOperator);\n\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n\n  _createClass(GroupByOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n  }]);\n\n  return GroupByOperator;\n}();\n\nvar GroupBySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(GroupBySubscriber, _Subscriber);\n\n  var _super = _createSuper(GroupBySubscriber);\n\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this;\n\n    _classCallCheck(this, GroupBySubscriber);\n\n    _this = _super.call(this, destination);\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n\n  _createClass(GroupBySubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var key;\n\n      try {\n        key = this.keySelector(value);\n      } catch (err) {\n        this.error(err);\n        return;\n      }\n\n      this._group(value, key);\n    }\n  }, {\n    key: \"_group\",\n    value: function _group(value, key) {\n      var groups = this.groups;\n\n      if (!groups) {\n        groups = this.groups = new Map();\n      }\n\n      var group = groups.get(key);\n      var element;\n\n      if (this.elementSelector) {\n        try {\n          element = this.elementSelector(value);\n        } catch (err) {\n          this.error(err);\n        }\n      } else {\n        element = value;\n      }\n\n      if (!group) {\n        group = this.subjectSelector ? this.subjectSelector() : new Subject();\n        groups.set(key, group);\n        var groupedObservable = new GroupedObservable(key, group, this);\n        this.destination.next(groupedObservable);\n\n        if (this.durationSelector) {\n          var duration;\n\n          try {\n            duration = this.durationSelector(new GroupedObservable(key, group));\n          } catch (err) {\n            this.error(err);\n            return;\n          }\n\n          this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n        }\n      }\n\n      if (!group.closed) {\n        group.next(element);\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var groups = this.groups;\n\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.error(err);\n        });\n        groups.clear();\n      }\n\n      this.destination.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var groups = this.groups;\n\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.complete();\n        });\n        groups.clear();\n      }\n\n      this.destination.complete();\n    }\n  }, {\n    key: \"removeGroup\",\n    value: function removeGroup(key) {\n      this.groups.delete(key);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        this.attemptedToUnsubscribe = true;\n\n        if (this.count === 0) {\n          _get(_getPrototypeOf(GroupBySubscriber.prototype), \"unsubscribe\", this).call(this);\n        }\n      }\n    }\n  }]);\n\n  return GroupBySubscriber;\n}(Subscriber);\n\nvar GroupDurationSubscriber = /*#__PURE__*/function (_Subscriber2) {\n  _inherits(GroupDurationSubscriber, _Subscriber2);\n\n  var _super2 = _createSuper(GroupDurationSubscriber);\n\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this2;\n\n    _classCallCheck(this, GroupDurationSubscriber);\n\n    _this2 = _super2.call(this, group);\n    _this2.key = key;\n    _this2.group = group;\n    _this2.parent = parent;\n    return _this2;\n  }\n\n  _createClass(GroupDurationSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.complete();\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var parent = this.parent,\n          key = this.key;\n      this.key = this.parent = null;\n\n      if (parent) {\n        parent.removeGroup(key);\n      }\n    }\n  }]);\n\n  return GroupDurationSubscriber;\n}(Subscriber);\n\nexport var GroupedObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(GroupedObservable, _Observable);\n\n  var _super3 = _createSuper(GroupedObservable);\n\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this3;\n\n    _classCallCheck(this, GroupedObservable);\n\n    _this3 = _super3.call(this);\n    _this3.key = key;\n    _this3.groupSubject = groupSubject;\n    _this3.refCountSubscription = refCountSubscription;\n    return _this3;\n  }\n\n  _createClass(GroupedObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var subscription = new Subscription();\n      var refCountSubscription = this.refCountSubscription,\n          groupSubject = this.groupSubject;\n\n      if (refCountSubscription && !refCountSubscription.closed) {\n        subscription.add(new InnerRefCountSubscription(refCountSubscription));\n      }\n\n      subscription.add(groupSubject.subscribe(subscriber));\n      return subscription;\n    }\n  }]);\n\n  return GroupedObservable;\n}(Observable);\n\nvar InnerRefCountSubscription = /*#__PURE__*/function (_Subscription) {\n  _inherits(InnerRefCountSubscription, _Subscription);\n\n  var _super4 = _createSuper(InnerRefCountSubscription);\n\n  function InnerRefCountSubscription(parent) {\n    var _this4;\n\n    _classCallCheck(this, InnerRefCountSubscription);\n\n    _this4 = _super4.call(this);\n    _this4.parent = parent;\n    parent.count++;\n    return _this4;\n  }\n\n  _createClass(InnerRefCountSubscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var parent = this.parent;\n\n      if (!parent.closed && !this.closed) {\n        _get(_getPrototypeOf(InnerRefCountSubscription.prototype), \"unsubscribe\", this).call(this);\n\n        parent.count -= 1;\n\n        if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n          parent.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"sources":["../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\nclass GroupByOperator {\n    constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n}\nclass GroupBySubscriber extends Subscriber {\n    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    _next(value) {\n        let key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    }\n    _group(value, key) {\n        let groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        let group = groups.get(key);\n        let element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            const groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                let duration;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    }\n    _error(err) {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    }\n    removeGroup(key) {\n        this.groups.delete(key);\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                super.unsubscribe();\n            }\n        }\n    }\n}\nclass GroupDurationSubscriber extends Subscriber {\n    constructor(key, group, parent) {\n        super(group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    _next(value) {\n        this.complete();\n    }\n    _unsubscribe() {\n        const { parent, key } = this;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    }\n}\nexport class GroupedObservable extends Observable {\n    constructor(key, groupSubject, refCountSubscription) {\n        super();\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    _subscribe(subscriber) {\n        const subscription = new Subscription();\n        const { refCountSubscription, groupSubject } = this;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    }\n}\nclass InnerRefCountSubscription extends Subscription {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        parent.count++;\n    }\n    unsubscribe() {\n        const parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            super.unsubscribe();\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=groupBy.js.map"]},"metadata":{},"sourceType":"module"}